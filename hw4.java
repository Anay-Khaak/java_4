// Задача 4. Сдвиг очереди
// Реализуйте метод rotateDeque в классе DequeTasks, который принимает Deque<Integer> и 
// число n. Метод должен повернуть очередь вправо на n позиций. Если n отрицательное, 
// повернуть влево.
// Подсказка No 1
// Для вращения очереди вправо на n позиций используйте метод addLast для добавления элемента в конец очереди и removeFirst для удаления элемента из начала очереди. Если n отрицательное, это означает, что нужно вращать влево.
// Подсказка No 2
// Поскольку очередь может быть вращена на большее количество позиций, чем её размер, сначала упростите значение n, используя остаток от деления на размер очереди (n % size). Это поможет избежать лишних циклов вращения.
// Подсказка No 3
// Если n отрицательное, преобразуйте его в эквивалентное положительное значение для вращения вправо. Например, если n равно -3 и размер очереди size равен 5, то
// вам нужно добавить size к n, чтобы получить эквивалентное положительное значение вращения.
// Подсказка No 4
// Используйте цикл, чтобы повторить операцию добавления и удаления элемента из очереди n раз, где n — количество позиций, на которые нужно вращать очередь. Убедитесь, что очередь не пуста, прежде чем выполнять операции.

import java.util.Deque; import java.util.LinkedList;
class DequeTasks {
public static void rotateDeque(Deque<Integer> deque, int n) {
if (deque.isEmpty()) return; int size = deque.size();
n = n % size;
if (n < 0) {
n += size; }
for (int i = 0; i < n; i++) { deque.addLast(deque.removeFirst());
}
System.out.println(deque); }
}
// Не удаляйте этот класс - он нужен для вывода результатов на экран и проверки
public class hw4 {
public static void main(String[] args) {
Deque<Integer> deque = new LinkedList<>(); int n;
if (args.length < 1) {
// При отправке кода на Выполнение, вы можете варьировать эти параметры
deque.add(1); deque.add(2); deque.add(3); deque.add(4); n = 2;
} else {
for (int i = 0; i < args.length - 1; i++) {
deque.add(Integer.parseInt(args[i])); }
n = Integer.parseInt(args[args.length - 1]); }
DequeTasks.rotateDeque(deque, n); }
}